(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{169:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),a("p",[t._v("Threads I've read")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.cnblogs.com/sammyliu/p/4713562.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("a good reference on dvr implementation"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://assafmuller.com/2015/04/15/distributed-virtual-routing-floating-ips/",target:"_blank",rel:"noopener noreferrer"}},[t._v("mostly refered to article on dvr and ovs"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://infosec-neo.blogspot.com/2007/07/how-to-implement-proxy-arp-on-linux-box.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("set up proxy arp"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.linuxproblem.org/art_8.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("how to enable/disable proxy arp in linux"),a("OutboundLink")],1)])]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("Resource (resource map) are extended by extension plugins.")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://assafmuller.com/2015/04/15/distributed-virtual-routing-floating-ips/",target:"_blank",rel:"noopener noreferrer"}},[t._v("most refered to article on DVR, very informative"),a("OutboundLink")],1)])])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"random-thought-on-proxy-arp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#random-thought-on-proxy-arp","aria-hidden":"true"}},[this._v("#")]),this._v(" RANDOM THOUGHT ON PROXY ARP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Openstack neutron "),s("code",[this._v("dvr")]),this._v(" mode relies on proxy arp to provide floating ip service. So I would like to dig in and find out how it implements both in terms of linux and neutron source code. By understanding the basics, it will do great help to understand what is going on under the hood.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"demo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[this._v("#")]),this._v(" DEMO")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("In this section, I would like to present you how to do a demo proxy arp in a Unbuntu 16.04 virtual machine. For simplicity I use a network namespace to offer a network isolation. I admit to feel uncomfortable with iptables but nevermind it is not necessary unless you want to really "),s("strong",[this._v("talk")]),this._v(" to the proxied nic.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"prepare-system-conf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prepare-system-conf","aria-hidden":"true"}},[this._v("#")]),this._v(" PREPARE SYSTEM CONF")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# sysctl could be used to check system configurations")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# make sure that following values to be 1")]),t._v("\nsysctl net.ipv4.conf."),a("span",{attrs:{class:"token variable"}},[t._v("${NIC}")]),t._v(".proxy_arp\nsysctl net.ipv4.ip_forward\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# if above is not 1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# then manually set it to 1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# ssyctl -w net.ipv4.conf.all.proxy_arp=1")]),t._v("\nsysctl -w net.ipv4.conf."),a("span",{attrs:{class:"token variable"}},[t._v("${NIC}")]),t._v(".proxy_arp"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("1\nsysctl -w net.ipv4.ip_forward"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("1\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"network-birdview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#network-birdview","aria-hidden":"true"}},[this._v("#")]),this._v(" NETWORK BIRDVIEW")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-raw extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("# ----------              -----------\n# |        |              |         |\n# | net 1  |   <------\x3e   |  net 2  |\n# | proxy  |              |  netns  |\n# |        |              |         |\n# ----------              -----------\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"create-netns-veth-pair"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-netns-veth-pair","aria-hidden":"true"}},[this._v("#")]),this._v(" CREATE NETNS & VETH PAIR")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ip netns add "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v("\nip "),a("span",{attrs:{class:"token function"}},[t._v("link")]),t._v(" add "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0}")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("type")]),t._v(" veth peer name "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH1}")]),t._v("\nip "),a("span",{attrs:{class:"token function"}},[t._v("link")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH1}")]),t._v(" netns "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# give them ip addresses")]),t._v("\nip addr add "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0_CIRD}")]),t._v(" dev "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0}")]),t._v("\nip "),a("span",{attrs:{class:"token function"}},[t._v("link")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0_CIRD}")]),t._v(" up\nip netns "),a("span",{attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v(" ip addr add "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH1_CIRD}")]),t._v(" dev "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH1}")]),t._v("\nip netns "),a("span",{attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v(" ip "),a("span",{attrs:{class:"token function"}},[t._v("link")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH1}")]),t._v(" up\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# test connectivity by ping")]),t._v("\nip netns "),a("span",{attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ping")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0_ADDR}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"setup-proxy-arp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setup-proxy-arp","aria-hidden":"true"}},[this._v("#")]),this._v(" SETUP PROXY ARP")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ip route add to "),a("span",{attrs:{class:"token variable"}},[t._v("${PROXIED_IPADDR}")]),t._v(" via "),a("span",{attrs:{class:"token variable"}},[t._v("${ANOTHER_IPADDR_ON_VM}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# try arping in another namespace")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# install arping if it is not present")]),t._v("\nip netns "),a("span",{attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("${NS_NAME}")]),t._v(" arping "),a("span",{attrs:{class:"token variable"}},[t._v("${VETH0}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"proxy-arp-references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy-arp-references","aria-hidden":"true"}},[this._v("#")]),this._v(" PROXY ARP REFERENCES")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"iptables-usages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iptables-usages","aria-hidden":"true"}},[this._v("#")]),this._v(" IPTABLES USAGES")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"north-south-traffic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#north-south-traffic","aria-hidden":"true"}},[this._v("#")]),this._v(" NORTH-SOUTH TRAFFIC")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"neutron-code-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#neutron-code-analysis","aria-hidden":"true"}},[this._v("#")]),this._v(" NEUTRON CODE ANALYSIS")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"ml2-plugin-extension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ml2-plugin-extension","aria-hidden":"true"}},[this._v("#")]),this._v(" ML2 PLUGIN (EXTENSION)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("neutron manager initialize, "),a("code",[t._v("_load_service_plugins")]),t._v(", namespace: "),a("code",[t._v("neutron.service_plugins")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("L3_ROUTER_NAT")]),t._v(" connects extension with service plugin; "),a("code",[t._v("neutron.services.l3_router.l3_router_plugin.L3RouterPlugin#get_plugin_type")])]),t._v(" "),a("li",[t._v("ExtensionManager loads extensions (default: neutron/extension)")]),t._v(" "),a("li",[t._v("Extension(ExtensionDesriptor) got method "),a("code",[t._v("get_resource")]),t._v(" which will return a collection of object having both controller and plugin etc.")]),t._v(" "),a("li",[t._v("l3 agent service callbacks are registerd at "),a("code",[t._v("neutron.services.l3_router.l3_router_plugin.L3RouterPlugin#__init__")]),t._v(".")]),t._v(" "),a("li",[t._v("fip port is created here "),a("code",[t._v("neutron.agent.l3.dvr_fip_ns.FipNamespace#_create_gateway_port")]),t._v(", "),a("code",[t._v("dvr_fip_ns.py")]),t._v(" implements specific fip namespace.")]),t._v(" "),a("li",[t._v("router updated notification is received & responsed "),a("code",[t._v("neutron.agent.l3.agent.L3NATAgent#_process_router_update")]),t._v(".")]),t._v(" "),a("li",[t._v("process router with "),a("code",[t._v("neutron.agent.l3.agent.L3NATAgent#_process_router_if_compatible")]),t._v(" if it does not exis or "),a("code",[t._v("self.router_info")]),t._v(" is not intialized")]),t._v(" "),a("li",[t._v("For south-north traffic, traffic originated from VM will first be sent to "),a("strong",[t._v("local router")]),t._v(", and then go all the way to "),a("strong",[t._v("snat namespace")]),t._v("; the reply packet will first hit "),a("strong",[t._v("snat")]),t._v(", then dvr router on "),a("strong",[t._v("network node")]),t._v(", and finally return to VM. So basically packet will go throught different path which could be easily verified by "),a("code",[t._v("tcpdump")]),t._v(".")]),t._v(" "),a("li",[t._v("gratuitous arp for updating arp tables of on-link devices.")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("Router")]),t._v(" and "),a("strong",[t._v("Floating")]),t._v(" are all handled by service plugin named "),a("code",[t._v("L3RouterPlugin")]),t._v(" and extension named "),a("code",[t._v("L3")]),t._v(" in "),a("code",[t._v("extensions/l3.py")]),t._v(" whereas extension extends rest api with extra controllers and service plugin offers method for the specific controller. How each extension is loaded depends on which neutron frontend framework is adopted, there are two frameworks exist, one for python paste and another one is for pecan. It is believed that the latter is going to replace legacy one, so I'm going to talk about api chain with the latter in the following chapter; but both of them share significant similiarities so analysis here should go fit another quite easily.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"initialization-process"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initialization-process","aria-hidden":"true"}},[this._v("#")]),this._v(" INITIALIZATION PROCESS")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Initialization takes place at "),s("code",[this._v("neutron.pecan_wsgi.startup.initialize_all")]),this._v(". It first loads ml2 plugin which handles networks, subnets and ports. Then it will load all the extensions,")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("initalize_all")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# skip code block")]),t._v("\n    resources "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ext_mgr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_resources"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Here resources could be interpreted as neutron managed objects, such as network, router, etc. More specifically it is list concatenation of return from "),s("code",[this._v("neutron_lib.api.extensions.ExtensionDescriptor#get_resources")]),this._v(". Then code traverses all the resources (except default) and register controllers in "),s("code",[this._v("NeutronManager")]),this._v(". Until now, controllers are registered and related requests should be handled properly.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"rest-api-entrance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-entrance","aria-hidden":"true"}},[this._v("#")]),this._v(" REST API ENTRANCE")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("Neutron has a unique flavor of defining method name as a combination of "),a("strong",[t._v("action")]),t._v(" (update, create) and "),a("strong",[t._v("resource")]),t._v(" (network, router), remember the fact that plugins are actual executor for a controller, it then become an obvious guess that floating ip creation method could be found in "),a("code",[t._v("L3RouterPlugin")]),t._v(". It is actually there with name "),a("code",[t._v("create_floatingip")]),t._v(". But keep in mind that it is possible that above guess is not correct, because besides typical naming convention, an action map could also be passed in to handle non-canonical request. Go to "),a("code",[t._v("get_resources")]),t._v(" method and checkout how "),a("strong",[t._v("action map")]),t._v(" is initialized there.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("@resource_extend"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("has_resource_extenders\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("L3RouterPlugin")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service_base"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ServicePluginBase"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     common_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CommonDbMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     extraroute_db"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ExtraRoute_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     l3_hamode_db"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_HA_NAT_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     l3_gwmode_db"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_NAT_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     l3_dvr_ha_scheduler_db"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_DVR_HA_scheduler_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     dns_db"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DNSDbMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_floatingip")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Create floating IP.\n\n        :param context: Neutron request context\n        :param floatingip: data for the floating IP being created\n        :returns: A floating IP object on success\n\n        As the l3 router plugin asynchronously creates floating IPs\n        leveraging the l3 agent, the initial status for the floating\n        IP object will be DOWN.\n        """')]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L3RouterPlugin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            initial_status"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("n_const"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_DOWN"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("L3_NAT_db_mixin")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L3_NAT_dbonly_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" L3RpcNotifierMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_floatingip")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            initial_status"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_ACTIVE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        floatingip_dict "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L3_NAT_db_mixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initial_status"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        router_id "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" floatingip_dict"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'router_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("notify_router_updated"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'create_floatingip'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" floatingip_dict\n\n\n@registry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("has_registry_receivers\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("L3_NAT_dbonly_mixin")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l3"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RouterPluginBase"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          base_services"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WorkerBase"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          st_attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StandardAttrDescriptionMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Mixin class to add L3/NAT router methods to db_base_plugin_v2."""')]),t._v("\n    @db_api"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("retry_if_session_inactive"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_floatingip")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            initial_status"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_ACTIVE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_create_floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initial_status"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_create_floatingip")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        initial_status"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_ACTIVE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# create db entry")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# callbackup, but for now callback is not registered")]),t._v("\n        registry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("notify"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resources"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATING_IP"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                events"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AFTER_UPDATE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_update_fip_assoc"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v("assoc_result"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("As above code shows, l3 router plugin handles db entry creation (floating ip) and agent notificiation (instead of a rpc call/cast). The logic is written in "),s("code",[this._v("neutron.db.l3_db.L3_NAT_dbonly_mixin#_create_floatingip")]),this._v(", it will test if network is external or contains a subnet, if succeeds, then a port with external ip is created. After port has been created, floating ip entry will have information and will be ready to create a new db record.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("So what is clear from above snippet is that "),a("strong",[t._v("real port")]),t._v(" is created by "),a("strong",[t._v("l3-agent")]),t._v(" from notifications. So next step will be analyzing how "),a("strong",[t._v("l3-agent")]),t._v(" works. The notification is "),a("code",[t._v("routers_updated")]),t._v(" which action is secretly dropped by "),a("code",[t._v("neutron.api.rpc.agentnotifiers.l3_rpc_agent_api.L3AgentNotifyAPI#_agent_notification_arp")]),t._v(", but it does not matter.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"l3-agent-handles-notification"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#l3-agent-handles-notification","aria-hidden":"true"}},[this._v("#")]),this._v(" L3-AGENT HANDLES NOTIFICATION")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("By design rpc calls will be handled by method of the same name here it is "),a("code",[t._v("routers_updated")]),t._v(", this method is nowhere but "),a("code",[t._v("neutron.agent.l3.agent.L3NATAgent#routers_updated")]),t._v(", noticing that "),a("code",[t._v("L3NATAgentWithStateReport")]),t._v(", which is a manager class, is a sub class of "),a("code",[t._v("L3NATAgent")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("L3NATAgent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ha"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AgentMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 dvr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AgentMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Manager for L3NatAgent"""')]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("routers_updated")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Deal with routers modification and creation RPC message."""')]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# This is needed for backward compatibility")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("isinstance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("routers"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("dict")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                routers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" router "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                update "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RouterUpdate"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("id")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PRIORITY_RPC"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_queue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("update"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("after_start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        eventlet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spawn_n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_routers_loop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"L3 agent started"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n@profiler"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trace_cls"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"l3-agent"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("L3NATAgent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ha"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AgentMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 dvr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AgentMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# spawn eventlet to handle router update uqueue")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_process_routers_loop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Starting _process_routers_loop"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        pool "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" eventlet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GreenPool"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token number"}},[t._v("8")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("True")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            pool"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spawn_n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_router_update"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# process candidates")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_process_router_update")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" rp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_queue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("each_update_to_next_router"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            router "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" update"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" update"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("action "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" queue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DELETE_ROUTER "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    update"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timestamp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" timeutils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utcnow"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),a("span",{attrs:{class:"token comment"}},[t._v("# initialize router object by given id")]),t._v("\n                    routers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plugin_rpc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_routers"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                          "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("update"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("id")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    router "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" routers"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# process router if it should be handled locally")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_router_if_compatible"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception "),a("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_process_router_if_compatible")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# If target_ex_net_id and ex_net_id are set they must be equal")]),t._v("\n        target_ex_net_id "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_fetch_external_net_id"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target_ex_net_id "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" ex_net_id "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" ex_net_id "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" target_ex_net_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# Double check that our single external_net_id has not changed")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# by forcing a check by RPC.")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ex_net_id "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_fetch_external_net_id"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("force"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token boolean"}},[t._v("True")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" n_exc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RouterNotCompatibleWithAgent"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    router_id"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_info"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# If router does not exists or service has been restarted")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# reinitialize instance")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_added_router"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# if router already there, then update it directly")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_updated_router"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# update router")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_process_updated_router")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        ri "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_info"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        is_dvr_only_agent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conf"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_mode "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n                            "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lib_const"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_AGENT_MODE_DVR"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            l3_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_AGENT_MODE_DVR_NO_EXTERNAL"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        is_ha_router "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("getattr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ha_state'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# For HA routers check that DB state matches actual state")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ha'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" is_dvr_only_agent "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" is_ha_router"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("check_ha_state_for_router"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l3_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HA_ROUTER_STATE_KEY"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" router\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# notfiy that router is to be updated")]),t._v("\n        registry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("notify"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resources"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ROUTER"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" events"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BEFORE_UPDATE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# there are two types of dvr rotuers: dvr, dvr_snat")]),t._v("\n        ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# notify router has finished updating")]),t._v("\n        registry"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("notify"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resources"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ROUTER"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" events"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AFTER_UPDATE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l3_ext_manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("update_router"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" router"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# neutron.service.Service")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Service")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_rpc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Service"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_host"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Service"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("report_interval"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            pulse "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" loopingcall"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FixedIntervalLoopingCall"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("report_state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            pulse"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interval"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("report_interval"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        initial_delay"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("report_interval"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pulse"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("periodic_interval"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("periodic_fuzzy_delay"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                initial_delay "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" random"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("periodic_fuzzy_delay"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                initial_delay "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n            periodic "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" loopingcall"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FixedIntervalLoopingCall"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("periodic_tasks"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            periodic"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interval"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("periodic_interval"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                           initial_delay"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("initial_delay"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("periodic"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# -----------------------------------")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# going to start those eventlet pools")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("after_start"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The code till triggers "),s("code",[this._v("process")]),this._v(" method is pretty complex. There are several things to keep in mind")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("Manager (L3NATAgent etc) handles a queued router update notification, and consume it by spawning coroutine in greenlet pool. This task is started by "),a("code",[t._v("Manager.after_start")]),t._v(" inside "),a("code",[t._v("Service.start")]),t._v(" method.")]),t._v(" "),a("li",[a("code",[t._v("router_info")]),t._v(" object will be created (because it is saved in memory) every time "),a("code",[t._v("l3-agent")]),t._v(" is restarted and "),a("code",[t._v("_process_added_router")]),t._v(" will be triggered if "),a("code",[t._v("router_info[key]")]),t._v(" is empty.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"core"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core","aria-hidden":"true"}},[this._v("#")]),this._v(" CORE")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("In dvr mode, a router could be further catogrized into at least three modes: "),a("strong",[t._v("dvr snat")]),t._v(", "),a("strong",[t._v("dvr local")]),t._v(", "),a("strong",[t._v("dvr edge")]),t._v(". Generally speaking "),a("strong",[t._v("dvr snat")]),t._v(" is used for snat flow on network node; "),a("strong",[t._v("dvr local")]),t._v(" typically resides on compute nodes; "),a("strong",[t._v("dvr edge")]),t._v(" locates on compute node but not going to handle out-going traffic flows (so floating ip should not be associated on this node). So now it is clear we are interesting in implementation of "),a("strong",[t._v("dvr local")]),t._v(" which is what we have in production.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("There are two types of routers, one is "),a("code",[t._v("dvr")]),t._v(", ther other is "),a("code",[t._v("dvr_snat")]),t._v(". Their implmentations are "),a("code",[t._v("DvrLocalRouter")]),t._v(" and "),a("code",[t._v("DvrEdgeRouter")]),t._v(" respectively. DvrLocalRouter is responsible for routing traffic on compute nodes, while DvrEdgeRouter is a NAT gateway.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# handle router on compute node")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("DvrLocalRouter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dvr_router_base"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DvrRouterBase"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# entrance")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("process")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        ex_gw_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# agent is 'L3NATAgentWithStateReport' itself")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# fip name is created from network_id")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# scan port in fip namespace and remove those staled ips")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scan_fip_ports"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DvrLocalRouter"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# override parent class method")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("process_external")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# this is a dvr router")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_conf"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_mode "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            n_const"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L3_AGENT_MODE_DVR_NO_EXTERNAL"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            ex_gw_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# make sure fg-xxx tap device exists")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_dvr_external_gateway_on_agent"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# make sure qrouter & fip are connected")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect_rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DvrLocalRouter"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_external"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_dvr_external_gateway_on_agent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        fip_agent_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_floating_agent_gw_interface"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" fip_agent_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            fip_agent_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plugin_rpc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"FloatingIP agent gateway port received from the "')]),t._v("\n                      "),a("span",{attrs:{class:"token string"}},[t._v('"plugin: %s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_agent_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_or_update_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_agent_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("get_router_cidrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""As no floatingip will be set on the rfp device. Get floatingip from\n        the route of fip namespace.\n        """')]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        fip_ns_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fip_2_rtr_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_int_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        device "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_2_rtr_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("fip_ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local_subnets"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allocate"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _fip_2_rtr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_pair"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        exist_routes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_routes"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            lib_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IP_VERSION_4"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" via"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token builtin"}},[t._v("str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip_to_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'cidr'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" route "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" exist_routes"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("add_floating_ip")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# Special Handling for DVR - update FIP namespace")]),t._v("\n        ip_cidr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip_to_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'floating_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floating_ip_added_dist"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("floating_ip_added_dist")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Add floating IP to respective namespace based on agent mode."""')]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_const"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DVR_SNAT_BOUND"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            floating_ip_status "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_centralized_floatingip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" floating_ip_status "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" lib_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_ACTIVE"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("centralized_floatingips_set"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" floating_ip_status\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_check_if_floatingip_bound_to_host"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        floating_ip "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'floating_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        fixed_ip "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# add rule for routing fip traffic backup to qrouter-xxx")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_add_floating_ip_rule"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("floating_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fixed_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fip_2_rtr_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_int_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("#Add routing rule in fip namespace")]),t._v("\n        fip_ns_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local_subnets"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allocate"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __ "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_pair"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        device "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_2_rtr_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("fip_ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# add this route for proxy arp purpose")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# when fip namespace is created, net.ipv4.conf.xxx.proxy_arp will ")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# be set to 1")]),t._v("\n        device"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_route"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# handles snat & iptables")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("DvrEdgeRouter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dvr_local_router"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DvrLocalRouter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("external_gateway_added")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token builtin"}},[t._v("super")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DvrEdgeRouter"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("external_gateway_added"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_is_this_snat_host"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_create_dvr_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# NOTE: When a router is created without a gateway the routes get")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# added to the router namespace, but if we wanted to populate")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# the same routes to the snat namespace after the gateway port")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# is added, we need to call routes_updated here.")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("routes_updated"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'routes'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snat_namespace"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# This is the case where the snat was moved manually or")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# rescheduled to a different agent when the agent was dead.")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"SNAT was moved or rescheduled to a different host "')]),t._v("\n                      "),a("span",{attrs:{class:"token string"}},[t._v('"and does not match with the current host. This is "')]),t._v("\n                      "),a("span",{attrs:{class:"token string"}},[t._v('"a stale namespace %s and will be cleared from the "')]),t._v("\n                      "),a("span",{attrs:{class:"token string"}},[t._v('"current dvr_snat host."')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snat_namespace"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("external_gateway_removed"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_create_dvr_gateway")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gw_interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        snat_ns "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_create_snat_namespace"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# connect snat_ports to br_int from SNAT namespace")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" port "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_snat_interfaces"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_plug_snat_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_external_gateway_added"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gw_interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                     snat_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preserve_ips"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snat_iptables_manager "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iptables_manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IptablesManager"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("snat_ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            use_ipv6"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use_ipv6"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_initialize_address_scope_iptables"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snat_iptables_manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_plug_snat_port")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        interface_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_get_snat_int_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_internal_network_added"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("snat_namespace"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ips'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'mac_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            lib_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SNAT_INT_DEV_PREFIX"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            mtu"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("port"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'mtu'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# base class")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RouterInfo")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token builtin"}},[t._v("object")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("process_external")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        fip_statuses "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("with")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iptables_manager"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defer_apply"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                ex_gw_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_process_external_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# Process SNAT/DNAT rules and addresses for floating IPs")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_snat_dnat_for_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# Once NAT rules for floating IPs are safely in place")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# configure their addresses on the external gateway port")]),t._v("\n            interface_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_external_device_interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            fip_statuses "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configure_fip_addresses"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("configure_fip_addresses")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_floating_ip_addresses"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# TODO(salv-orlando): Less broad catching")]),t._v("\n            msg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'L3 agent failure to setup floating IPs'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exception"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" n_exc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FloatingIpSetupException"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_or_update_gateway_port")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        interface_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ext_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# The lock is used to make sure another thread doesn't call to")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# update the gateway port before we are done initializing things.")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("with")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_fip_port_lock"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            is_first "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subscribe"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_first"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_create_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token comment"}},[t._v("# skip")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_create_gateway_port")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Create namespace, request port creationg from Plugin,\n           then configure Floating IP gateway port.\n        """')]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"DVR: adding gateway interface: %s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ns_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'mac_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         bridge"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_conf"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("external_network_bridge"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         prefix"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("FIP_EXT_DEV_PREFIX"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         mtu"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'mtu'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# Remove stale fg devices")]),t._v("\n        ip_wrapper "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPWrapper"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        devices "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_wrapper"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_devices"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" device "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" devices"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startswith"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FIP_EXT_DEV_PREFIX"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'DVR: unplug: %s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                ext_net_bridge "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_conf"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("external_network_bridge\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unplug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                   bridge"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ext_net_bridge"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                   namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                   prefix"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("FIP_EXT_DEV_PREFIX"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        ip_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fixed_ip_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ips'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_l3"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            clean_connections"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token boolean"}},[t._v("True")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_gateway_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ex_gw_port\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# enable proxy arp")]),t._v("\n        cmd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'sysctl'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'-w'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'net.ipv4.conf.%s.proxy_arp=1'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        ip_wrapper"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("netns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" check_exit_code"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token boolean"}},[t._v("False")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("process_floating_ip_addresses")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Configure IP addresses on router\'s external gateway interface.\n\n        Ensures addresses for existing floating IPs and cleans up\n        those that should not longer be configured.\n        """')]),t._v("\n\n        fip_statuses "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" interface_name "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'No Interface for floating IPs router: %s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                      self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fip_statuses\n\n        device "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        existing_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_router_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("device"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        new_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        gw_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_get_gw_ips_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        floating_ips "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_floating_ips"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# Loop once to ensure that floating ips are configured.")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" fip "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" floating_ips"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            fip_ip "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'floating_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            ip_cidr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ip_to_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            new_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lib_constants"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FLOATINGIP_STATUS_ACTIVE\n            cent_router_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_centralized_router_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ip_cidr "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" existing_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# add_floating_ip is implemented by dvr local object")]),t._v("\n                fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_floating_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Floating ip %(id)s added, status %(status)s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                           "),a("span",{attrs:{class:"token string"}},[t._v("'status'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_ip "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_map "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v("\n                  self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Floating IP was moved from fixed IP "')]),t._v("\n                          "),a("span",{attrs:{class:"token string"}},[t._v('"%(old)s to %(new)s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token string"}},[t._v("'old'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fip_map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                           "),a("span",{attrs:{class:"token string"}},[t._v("'new'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("move_floating_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip_cidr "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cent_router_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v("\n                fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'host'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("host"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Floating IP is migrating from centralized "')]),t._v("\n                          "),a("span",{attrs:{class:"token string"}},[t._v('"to distributed: %s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("migrate_centralized_floating_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" device"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'status'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# mark the status as not changed. we can't remove it because")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# that's how the caller determines that it was removed")]),t._v("\n                fip_statuses"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" FLOATINGIP_STATUS_NOCHANGE\n        fips_to_remove "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            ip_cidr "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ip_cidr "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" existing_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" new_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" gw_cidrs\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_cidr_host"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ip_cidr "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" fips_to_remove"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Removing floating ip %s from interface %s in "')]),t._v("\n                      "),a("span",{attrs:{class:"token string"}},[t._v('"namespace %s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove_floating_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("device"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip_cidr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fip_statuses\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_internal_network_added")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" network_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                fixed_ips"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mac_address"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prefix"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mtu"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"adding internal network: prefix(%s), port(%s)"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  prefix"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("network_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mac_address"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         prefix"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("prefix"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mtu"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        ip_cidrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" common_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fixed_ip_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fixed_ips"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_router_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip_cidrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" fixed_ip "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" fixed_ips"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send_ip_addr_adv_notif"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          fixed_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# implements")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("FipNamespace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("namespaces"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Namespace"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# create fg-xxx tap device inside of fip namespace")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_or_update_gateway_port")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        interface_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ext_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# The lock is used to make sure another thread doesn't call to")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# update the gateway port before we are done initializing things.")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("with")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_fip_port_lock"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            is_first "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subscribe"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'network_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_first"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# Check for subnets that are populated for the agent")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("# gateway port that was created on the server.")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'subnets'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_create_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_update_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                        agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),a("span",{attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_update_gateway_port")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_gateway_port "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v("\n            "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_check_for_gateway_ip_change"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# Caller already holding lock")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_update_gateway_route"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tbl_index"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# Cache the agent gateway port after successfully updating")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# the gateway route, so that checking on self.agent_gateway_port")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# will be a valid check")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agent_gateway_port "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" agent_gateway_port\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("_update_gateway_route")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                             interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tbl_index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        ns_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ipd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# If the 'fg-' device doesn't exist in the namespace then trying")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# to send advertisements or configure the default route will just")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# throw exceptions.  Unsubscribe this external network so that")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# the next call will trigger the interface to be plugged.")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" ipd"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warning"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'DVR: FIP gateway port with interface '")]),t._v("\n                        "),a("span",{attrs:{class:"token string"}},[t._v("'name: %(device)s does not exist in the given '")]),t._v("\n                        "),a("span",{attrs:{class:"token string"}},[t._v("'namespace: %(ns)s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token string"}},[t._v("'device'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                              "),a("span",{attrs:{class:"token string"}},[t._v("'ns'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            msg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'DVR: Gateway update route in FIP namespace failed, retry '")]),t._v("\n                    "),a("span",{attrs:{class:"token string"}},[t._v("'should be attempted on next call'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" n_exc"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FloatingIpSetupException"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" fixed_ip "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'fixed_ips'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send_ip_addr_adv_notif"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          interface_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          fixed_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'ip_address'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" subnet "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" agent_gateway_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'subnets'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            gw_ip "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'gateway_ip'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" gw_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                is_gateway_not_in_subnet "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" ipam_utils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("check_subnet_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                                                subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'cidr'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gw_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_gateway_not_in_subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    ipd"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_route"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gw_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scope"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v("'link'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_add_default_gateway_for_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gw_ip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ipd"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tbl_index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                current_gateway "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ipd"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" current_gateway "),a("span",{attrs:{class:"token operator"}},[t._v("and")]),t._v(" current_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'gateway'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    ipd"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current_gateway"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'gateway'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("create_rtr_2_fip_link")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""Create interface between router and Floating IP namespace."""')]),t._v("\n        LOG"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Create FIP link interfaces for router %s"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        rtr_2_fip_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_rtr_ext_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fip_2_rtr_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_int_device_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fip_ns_name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_name"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token comment"}},[t._v("# add link local IP to interface")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("None")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local_subnets"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allocate"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("router_id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_2_rtr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rtr_fip_subnet"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_pair"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        rtr_2_fip_dev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fip_2_rtr_dev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPDevice"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_2_rtr_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("fip_ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("not")]),t._v(" rtr_2_fip_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            ip_wrapper "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_lib"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IPWrapper"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("namespace"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            rtr_2_fip_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_2_rtr_dev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ip_wrapper"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_veth"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                               fip_2_rtr_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                               fip_ns_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            mtu "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_ex_gw_port"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'mtu'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                rtr_2_fip_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                fip_2_rtr_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtu"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            rtr_2_fip_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_up"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            fip_2_rtr_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_up"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_add_cidr_to_device"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rtr_2_fip"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_add_cidr_to_device"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_2_rtr_dev"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fip_2_rtr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_add_rtr_ext_route_rule_to_route_table"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fip_2_rtr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                    fip_2_rtr_name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"network-flow-review"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#network-flow-review","aria-hidden":"true"}},[this._v("#")]),this._v(" NETWORK FLOW REVIEW")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"fixed-ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fixed-ip","aria-hidden":"true"}},[this._v("#")]),this._v(" FIXED IP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-raw extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("vm -> qr-xxx (on compute node) -> sg-xxx (snat) -> outside\noutside ->  sg-xxx (snat) -> qr-xxx (network node) -> vm\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"floating-ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floating-ip","aria-hidden":"true"}},[this._v("#")]),this._v(" FLOATING IP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-raw extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("vm -> qr-xxx (snat/dnat) -> rfp-xxx -> fpr-xxx -> fg-xxx -> outside\noutside -> fg-xxx -> fpr-xxx -> rfp-xxx (snat/dnat) -> qr-xxx -> vm\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"random-rants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#random-rants","aria-hidden":"true"}},[this._v("#")]),this._v(" RANDOM RANTS")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("My question is why "),s("code",[this._v("fip")]),this._v(" namespace is necessary? Isn't still possible to make floating ip associate with each router, like what is done in legacy rotuer implementations?")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"fip-references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fip-references","aria-hidden":"true"}},[this._v("#")]),this._v(" FIP REFERENCES")])}],!1,null,null,null);e.options.__file="proxy_arp.md";s.default=e.exports}}]);